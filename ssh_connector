#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
SSH command wrapper with find partial host name from Excel IPlists.
"""

from __future__ import (division, print_function, absolute_import,
                        unicode_literals)
import argparse
import os
import subprocess
import sys

from lib import get_hostinfo as info
from lib import prepare_logfile as log


class Args(object):
    """
    Command arguments.
    """

    def __init__(self):
        usage = ("\nPlease specify target hostname: \n"
                 "   $ python ssh_connector.py -t hogehoge")
        description = '<< SSH client wrapper tool with using iplist. >>'

        parser = argparse.ArgumentParser(prog='ssh_connector',
                                         usage=usage,
                                         epilog='end',
                                         add_help=True,
                                         description=description)
        parser.add_argument('-t', '--targethost', type=str,
                            help='ssh target hostname.')
        parser.add_argument('-i', '--key', type=str, help='auth secret key.')
        parser.add_argument('-p', '--port', type=str, help='ssh port.')
        parser.add_argument('-u', '--user', type=str, help='ssh login user.')
        parser.add_argument('-s', '--server', type=str,
                            help=(
                                'ssh login target server.\n'
                                'if specified this option, '
                                'this command connects to the server directly '
                                'without searching IP lists.'))
        parser.add_argument('-S', '--proxy-server', type=str,
                            help='proxy server for ssh login.')
        parser.add_argument('-I', '--proxy-key', type=str,
                            help='ssh key for proxy server.')
        parser.add_argument('-U', '--proxy-user', type=str,
                            help='ssh user for proxy server.')
        parser.add_argument('-P', '--proxy-port', type=str,
                            help='ssh port for proxy server.')

        args_instance = parser.parse_args()

        self.partial_server_name = args_instance.targethost
        self.key = args_instance.key
        self.port = args_instance.port
        self.user = args_instance.user

        self.server_name = args_instance.server
        if self.server_name:
            self.search_iplist = False
        else:
            self.search_iplist = True

        self.proxy_server = args_instance.proxy_server
        self.proxy_key = args_instance.proxy_key
        self.proxy_user = args_instance.proxy_user
        self.proxy_port = args_instance.proxy_port


def get_args():
    """
    Get command arguments.
    """

    return Args()


def _gen_linux_command(sshcmd, logfile_path):
    cmd = 'script -fq -c "'
    cmd = cmd + sshcmd + '" {}'.format(logfile_path)

    return cmd


def _gen_mac_command(sshcmd, logfile_path):
    cmd = 'script -q {} '.format(logfile_path)
    cmd = cmd + sshcmd
    return cmd


def _is_linux():
    return os.path.isfile('/etc/os-release')


def gen_connect_command(command_args, target_ip, logfile_path):
    """
    Generate 'ssh' command with options.
    """

    proxy_server = command_args.proxy_server
    proxy_key = command_args.proxy_key
    proxy_user = command_args.proxy_user
    proxy_port = command_args.proxy_port
    key = command_args.key
    port = command_args.port
    user = command_args.user

    sshcmd = 'ssh '

    if proxy_server:
        proxy_com = "ssh "

        if proxy_key:
            proxy_com = proxy_com + "-i {} ".format(proxy_key)

        if proxy_port:
            proxy_com = proxy_com + "-p {} ".format(proxy_port)

        proxy_com = proxy_com + "-W %h:%p "

        if proxy_user:
            proxy_com = proxy_com + "{}@".format(proxy_user)

        proxy_com = proxy_com + proxy_server
        sshcmd = sshcmd + "-o ProxyCommand='{}' ".format(proxy_com)

    if key:
        sshcmd = sshcmd + "-i {} ".format(key)

    if port:
        sshcmd = sshcmd + "-p {} ".format(port)

    if user:
        sshcmd = sshcmd + \
            "{user}@{ipaddress} ".format(user=user, ipaddress=target_ip)
    else:
        sshcmd = sshcmd + target_ip

    sshcmd = sshcmd + ' '

    if _is_linux():
        cmd = _gen_linux_command(sshcmd, logfile_path)
    else:
        cmd = _gen_mac_command(sshcmd, logfile_path)

    return cmd


def connect_ssh(command_args, target_hostinfo):
    """
    Execute ssh command.
    """

    target_hostname = target_hostinfo.name
    target_ip = target_hostinfo.ipaddress

    logfile_path = log.PrepareLogfile().prepare_logfile(target_hostname)
    cmd = gen_connect_command(command_args, target_ip, logfile_path)

    print(
        '===================================================================')
    subprocess.call(cmd, shell=True)
    sys.exit(0)


def main(command_args):
    """
    Prepare target hostname and IP address and execute ssh command.
    """

    search_iplist = command_args.search_iplist

    if command_args.partial_server_name:
        target_name = command_args.partial_server_name
    elif command_args.server_name:
        target_name = command_args.server_name
    else:
        print('No target host was specified.')
        sys.exit(1)

    target_hostinfo = info.get_target_hostinfo(target_name, search_iplist)
    connect_ssh(command_args, target_hostinfo)


if __name__ == '__main__':
    ARGS = get_args()
    main(ARGS)
